#!/bin/bash

set -e  # Exit immediately if a command exits with a non-zero status.

# ... (keep the existing variable definitions for ORGANIZATION, PROJECT, REPO_ID, etc.)

# Hardcoded object IDs for approvers (replace these with your actual object IDs)
CREATOR_APPROVER_ID="11111111-1111-1111-1111-111111111111"
ADDITIONAL_APPROVER_1_ID="22222222-2222-2222-2222-222222222222"
ADDITIONAL_APPROVER_2_ID="33333333-3333-3333-3333-333333333333"
ADDITIONAL_APPROVER_3_ID="44444444-4444-4444-4444-444444444444"

# Function to approve PR
approve_pr() {
    local approver_id=$1
    local approver_name=$2
    APPROVE_DATA='{
        "vote": 10
    }'
    APPROVE_RESPONSE=$(make_api_call PUT "https://dev.azure.com/$ORGANIZATION/$PROJECT/_apis/git/repositories/$REPO_ID/pullrequests/$PR_ID/reviewers/$approver_id?api-version=7.1" "$APPROVE_DATA")
    echo "Approval Response for $approver_name: $APPROVE_RESPONSE"

    if echo "$APPROVE_RESPONSE" | jq -e '.vote == 10' > /dev/null; then
        echo "Pull request approved successfully by $approver_name."
    else
        echo "Failed to approve pull request by $approver_name. Response: $APPROVE_RESPONSE"
        return 1
    fi
}

# Create a pull request
echo "Creating pull request..."
PR_DATA=$(cat <<EOF
{
    "sourceRefName": "refs/heads/$BRANCH_NAME",
    "targetRefName": "refs/heads/main",
    "title": "$PR_TITLE",
    "description": "$PR_DESCRIPTION"
}
EOF
)

PR_RESPONSE=$(make_api_call POST "https://dev.azure.com/$ORGANIZATION/$PROJECT/_apis/git/repositories/$REPO_ID/pullrequests?api-version=7.1" "$PR_DATA")
echo "Raw PR Response: $PR_RESPONSE"

# Extract the PR ID from the response
PR_ID=$(echo "$PR_RESPONSE" | jq -r '.pullRequestId')

if [ -z "$PR_ID" ] || [ "$PR_ID" == "null" ]; then
    echo "Failed to create pull request or extract PR ID. Response: $PR_RESPONSE"
    exit 1
fi

echo "Pull request created with ID: $PR_ID"

# Approve the pull request with all approvers
approve_pr "$CREATOR_APPROVER_ID" "Creator/Approver"
approve_pr "$ADDITIONAL_APPROVER_1_ID" "Additional Approver 1"
approve_pr "$ADDITIONAL_APPROVER_2_ID" "Additional Approver 2"
approve_pr "$ADDITIONAL_APPROVER_3_ID" "Additional Approver 3"

# Check the status of the pull request
PR_STATUS=$(make_api_call GET "https://dev.azure.com/$ORGANIZATION/$PROJECT/_apis/git/repositories/$REPO_ID/pullrequests/$PR_ID?api-version=7.1")
echo "Pull Request Status: $PR_STATUS"

if echo "$PR_STATUS" | jq -e '.status == "completed"' > /dev/null; then
    echo "Pull request has been automatically merged."
else
    echo "Attempting to complete the pull request..."
    COMPLETE_DATA='{
        "status": "completed",
        "lastMergeSourceCommit": {
            "commitId": "'$(echo "$PR_STATUS" | jq -r '.lastMergeSourceCommit.commitId')'"
        },
        "completionOptions": {
            "deleteSourceBranch": true,
            "mergeCommitMessage": "Merging PR #'$PR_ID'"
        }
    }'
    
    COMPLETE_RESPONSE=$(make_api_call PATCH "https://dev.azure.com/$ORGANIZATION/$PROJECT/_apis/git/repositories/$REPO_ID/pullrequests/$PR_ID?api-version=7.1" "$COMPLETE_DATA")
    echo "Completion Response: $COMPLETE_RESPONSE"
    
    if echo "$COMPLETE_RESPONSE" | jq -e '.status == "completed"' > /dev/null; then
        echo "Pull request completed successfully."
    else
        echo "Failed to complete pull request. Response: $COMPLETE_RESPONSE"
        exit 1
    fi
fi

echo "Workflow completed successfully!"
