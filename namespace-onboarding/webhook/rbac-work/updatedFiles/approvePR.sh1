#!/bin/bash

# Parameters
branch="${1:-"refs/heads/prodRbacRoleBinding"}"
newBranch="${2:-"refs/heads/new-manifests"}"
commitMessage="${3:-"uk8s-cluster-config-new-manifests"}"
gitUsername="${4:-"Azure Devops Pipeline - Kustomization Manifest Update Automation"}"
Repo="${5:-"uk8s-cluster-config"}"

# Base URI for Azure DevOps API
baseUri="https://dev.azure.com/UBS-Cloud/UBSCloudPlatform/_apis/git/repositories/${Repo}"

# Get Azure access token
token=$(az account get-access-token --resource "499b84ac-1321-427f-aa17-267ca6975798" --query "accessToken" --output tsv)
echo "token: $token"

# Headers
authHeader="Authorization: Bearer $token"
contentTypeHeader="Content-Type: application/json"

# Function to check if a branch exists
check_branch_exists() {
    local branchName=$1
    local branchUri="${baseUri}/refs?filter=heads/${branchName}&api-version=7.1-preview.1"
    local branchResponse=$(curl -s -H "$authHeader" "$branchUri")
    local branchExists=$(echo "$branchResponse" | jq -r 'length')
    echo $branchExists
}

# Function to create a new branch
create_branch() {
    local sourceBranch=$1
    local newBranch=$2
    
    # Get the latest commit ID of the source branch
    commitUri="${baseUri}/stats/branches?name=${sourceBranch}&api-version=7.1-preview.1"
    commitResponse=$(curl -s -H "$authHeader" "$commitUri")
    latestCommitId=$(echo "$commitResponse" | jq -r '.[0].commit.commitId')

    # Create the new branch
    createBranchUri="${baseUri}/refs?api-version=7.1-preview.1"
    createBranchPayload=$(jq -n \
        --arg refName "refs/heads/${newBranch}" \
        --arg objectId "$latestCommitId" \
        '[{
            "name": $refName,
            "oldObjectId": "0000000000000000000000000000000000000000",
            "newObjectId": $objectId
        }]')

    createBranchResponse=$(curl -s -w "%{http_code}" -o create_branch_response.json -X POST "$createBranchUri" -H "$authHeader" -H "$contentTypeHeader" -d "$createBranchPayload")
    createBranchStatusCode=$(tail -n1 <<< "$createBranchResponse")

    if [ "$createBranchStatusCode" -eq 200 ]; then
        echo "Branch $newBranch created successfully"
    else
        echo "Failed to create branch $newBranch. Status code: $createBranchStatusCode"
        cat create_branch_response.json
        exit 1
    fi
}

# Check if the target branch exists
targetBranchExists=$(check_branch_exists "$branch")
if [ "$targetBranchExists" -eq 0 ]; then
    echo "Target branch $branch does not exist. Exiting..."
    exit 1
fi

# Check if the source branch exists, create it if it doesn't
sourceBranchExists=$(check_branch_exists "$newBranch")
if [ "$sourceBranchExists" -eq 0 ]; then
    echo "Source branch $newBranch does not exist. Creating it..."
    create_branch "$branch" "$newBranch"
else
    echo "Source branch $newBranch already exists"
fi

# Double-check that both branches now exist
targetBranchExists=$(check_branch_exists "$branch")
sourceBranchExists=$(check_branch_exists "$newBranch")

if [ "$targetBranchExists" -eq 0 ] || [ "$sourceBranchExists" -eq 0 ]; then
    echo "Error: One or both branches still do not exist after attempted creation. Exiting..."
    exit 1
fi

# Pull request payload
pullRequest=$(jq -n \
  --arg sourceRefName "refs/heads/$newBranch" \
  --arg targetRefName "refs/heads/$branch" \
  --arg title "New UK8S-Core GitOps Release - from $newBranch to $branch" \
  --arg description "$commitMessage" \
  '{
    sourceRefName: $sourceRefName,
    targetRefName: $targetRefName,
    title: $title,
    description: $description,
    completionOptions: {
      mergeStrategy: "squash",
      deleteSourceBranch: true,
      transitionWorkItems: true
    }
  }')

echo "Sending a REST call to create a new pull request from $newBranch to $branch"
echo "$pullRequest"

# REST call to create a Pull Request
createPrUri="${baseUri}/pullrequests?api-version=7.1-preview.1"
response=$(curl -s -w "%{http_code}" -o response.json -X POST "$createPrUri" -H "$authHeader" -H "$contentTypeHeader" -d "$pullRequest")
statusCode=$(tail -n1 <<< "$response")

if [ "$statusCode" -eq 201 ]; then
  echo "Pull request created successfully"
  prId=$(jq -r '.pullRequestId' response.json)
  echo "Pull Request ID: $prId"

  # Auto-approve the pull request
  approvePrUri="${baseUri}/pullrequests/${prId}/reviewers/me?api-version=7.1-preview.1"
  approvePayload='{"vote": 10}'
  
  approveResponse=$(curl -s -w "%{http_code}" -o approve_response.json -X PUT "$approvePrUri" -H "$authHeader" -H "$contentTypeHeader" -d "$approvePayload")
  approveStatusCode=$(tail -n1 <<< "$approveResponse")

  if [ "$approveStatusCode" -eq 200 ]; then
    echo "Pull request approved successfully"

    # Complete (merge) the pull request
    completePrUri="${baseUri}/pullrequests/${prId}?api-version=7.1-preview.1"
    completePayload='{"status": "completed"}'
    
    completeResponse=$(curl -s -w "%{http_code}" -o complete_response.json -X PATCH "$completePrUri" -H "$authHeader" -H "$contentTypeHeader" -d "$completePayload")
    completeStatusCode=$(tail -n1 <<< "$completeResponse")

    if [ "$completeStatusCode" -eq 200 ]; then
      echo "Pull request completed (merged) successfully"
    else
      echo "Failed to complete pull request. Status code: $completeStatusCode"
      cat complete_response.json
    fi
  else
    echo "Failed to approve pull request. Status code: $approveStatusCode"
    cat approve_response.json
  fi
else
  echo "Failed to create pull request. Status code: $statusCode"
  cat response.json
fi

# Clean up
rm response.json approve_response.json complete_response.json create_branch_response.json 2>/dev/null